// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

// ==============================================
// ENUMS
// ==============================================

enum UserRole {
    instructor
    student
    admin
    secretary
}

enum TrainingType {
    EN_LIGNE
    VISION_CONFERENCE
    EN_PRESENTIEL
    HYBRIDE
}

enum FormationType {
    EN_LIGNE
    VISION_CONFERENCE
    EN_PRESENTIEL
    HYBRIDE
}

enum DocumentCategory {
    pendant
    durant
    apres
}

// ==============================================
// MAIN MODELS
// ==============================================

model Users {
    id                  Int       @id @default(autoincrement())
    uuid                String    @unique @default(uuid()) @db.Uuid
    num_record          String?   @unique
    avatar              String?
    fs_name             String?
    ls_name             String?
    nick_name           String?
    email               String    @unique
    phone               String?   @unique
    password            String?
    verification_code   String?
    last_login          DateTime?
    is_verified         Int       @default(0)
    status              Int       @default(1)
    can_update_password Int       @default(0)
    adresse_physique    String?
    pays_residance      String?
    ville_residance     String?
    num_piece_identite  String?   @unique
    date_of_birth       String?
    firstName           String?
    lastName            String?
    address             String?
    country             String?
    city                String?
    identityNumber      Int?
    dateBirth           String?
    role                UserRole  @default(student)
    otp                 String?
    otpExpires          DateTime?
    createdAt           DateTime  @default(now())
    updatedAt           DateTime  @updatedAt

    // Relations
    createdSessions         Session[]
    createdLessondocuments  Lessondocument[]
    createdSessiondocuments Sessiondocument[]
    payments                Payement[]
    createdCours            Cours[]

    @@map("___tbl_tantor_users")
}

model TrainingCategory {
    id          String   @id @default(uuid()) @db.Uuid
    title       String
    description String
    createdAt   DateTime @default(now())
    updatedAt   DateTime @updatedAt

    // Relations
    trainings  Training[]
    formations Formations[]

    @@map("___tbl_tantor_trainingcategory")
}

model Training {
    id                  String        @id @default(uuid()) @db.Uuid
    title               String
    subtitle            String?
    id_trainingcategory String?       @db.Uuid
    trainingtype        TrainingType?
    rnc                 String?
    description         String?
    requirement         String?
    pedagogygoals       String?
    prix                Decimal?      @db.Decimal(10, 2)
    createdAt           DateTime      @default(now())
    updatedAt           DateTime      @updatedAt

    // Relations
    trainingCategory TrainingCategory? @relation(fields: [id_trainingcategory], references: [id])
    sessions         Session[]

    @@map("___tbl_tantor_trainings")
}

model Formations {
    id             String        @id @default(uuid()) @db.Uuid
    titre          String
    sous_titre     String
    id_training    String?       @db.Uuid
    id_thematic    Int?
    type_formation FormationType @default(EN_LIGNE)
    rnc            String?
    description    String?
    prerequis      String?
    alternance     String?
    status         Int           @default(1)
    prix           Float         @default(900)
    createdAt      DateTime      @default(now())
    updatedAt      DateTime      @updatedAt

    // Relations
    trainingCategory TrainingCategory? @relation(fields: [id_training], references: [id])

    @@map("___tbl_tantor_formationsascours")
}

model Session {
    id                   String   @id @default(uuid()) @db.Uuid
    title                String?
    id_trainings         Int
    progression          Int      @default(0)
    nb_places            Int?
    nb_places_disponible Int?
    text_reglement       String?
    required_documents   Json?
    date_session_debut   DateTime
    date_session_fin     DateTime
    description          String
    createdBy            String?  @db.Uuid
    createdAt            DateTime @default(now())
    updatedAt            DateTime @updatedAt

    // Relations
    CreatedBy        Users?            @relation(fields: [createdBy], references: [uuid])
    lessondocuments  Lessondocument[]
    sessiondocuments Sessiondocument[]
    payments         Payement[]
    Training         Training?         @relation(fields: [trainingId], references: [id])
    trainingId       String?           @db.Uuid

    @@map("___tbl_tantor_sessions")
}

model Cours {
    id           Int      @id @default(autoincrement())
    title        String?
    description  String?
    ponderation  Int?
    is_published Boolean?
    createdBy    Int?
    id_session   Int?
    id_formateur String?
    createdAt    DateTime @default(now())
    updatedAt    DateTime @updatedAt

    // Relations
    CreatedBy Users?   @relation(fields: [createdBy], references: [id])
    lessons   Lesson[]

    @@map("___tbl_tantor_cours")
}

model Lesson {
    id          Int      @id @default(autoincrement())
    title       String
    description String?
    id_cours    String   @db.Uuid
    createdAt   DateTime @default(now())
    updatedAt   DateTime @updatedAt

    // Relations
    cours           Cours?           @relation(fields: [id_cours], references: [id])
    lessondocuments Lessondocument[]

    @@map("___tbl_tantor_lesson")
}

model ModuleDeFormation {
    id           String   @id @default(uuid()) @db.Uuid
    uuid         String   @unique @default(uuid()) @db.Uuid
    description  String?
    piece_jointe String
    createdAt    DateTime @default(now())
    updatedAt    DateTime @updatedAt

    @@map("___tbl_tantor_moduledeformation")
}

// ==============================================
// DOCUMENT MODELS
// ==============================================

model Lessondocument {
    id         Int      @id @default(autoincrement())
    file_name  String
    url        String
    type       String?
    id_lesson  String   @db.Uuid
    createdBy  Int
    id_session Int
    createdAt  DateTime @default(now())
    updatedAt  DateTime @updatedAt

    // Relations
    lesson    Lesson?  @relation(fields: [id_lesson], references: [id])
    CreatedBy Users?   @relation(fields: [createdBy], references: [id])
    Session   Session? @relation(fields: [sessionId], references: [id])
    sessionId String?  @db.Uuid

    @@map("___tbl_tantor_lessondocument")
}

model Sessiondocument {
    id           Int              @id @default(autoincrement())
    title        String
    description  String?
    piece_jointe String
    type         String?
    category     DocumentCategory
    id_session   Int
    createdBy    Int
    createdAt    DateTime         @default(now())
    updatedAt    DateTime         @updatedAt

    // Relations
    session   Session? @relation(fields: [id_session], references: [id])
    CreatedBy Users?   @relation(fields: [createdBy], references: [id])

    @@map("___tbl_tantor_sessiondocument")
}

// ==============================================
// PAYMENT MODELS
// ==============================================

model Payement {
    id                 Int      @id @default(autoincrement())
    id_stripe_payment  String?
    id_user            Int
    id_session         Int
    id_session_student Int
    full_name          String
    amount             Float
    card_number        String?
    month              String?
    year               String?
    cvv                String?
    status             Int      @default(0) // 1 paid, 0 not paid, 2 failed, 3 refunded, 4 disputed
    createdAt          DateTime @default(now())
    updatedAt          DateTime @updatedAt

    // Relations
    Stagiaire Users?   @relation(fields: [id_user], references: [id])
    Formation Session? @relation(fields: [id_session], references: [id])

    @@unique([id_user, id_session, id_session_student])
    @@map("___tbl_tantor_payementmethode")
}

// ==============================================
// COMMUNICATION MODELS
// ==============================================

model Newsletter {
    user_email String   @unique
    status     Int      @default(1)
    createdAt  DateTime @default(now())
    updatedAt  DateTime @updatedAt

    @@map("___tbl_tantor_newsletter")
}

model Contacts {
    id        Int      @id @default(autoincrement())
    from_name String
    from_mail String
    subject   String
    content   String
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    @@map("___tbl_tantor_contacts")
}

model Messages {
    id        Int      @id @default(autoincrement())
    content   String
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    @@map("___tbl_tantor_messages")
}

// ==============================================
// SURVEY MODELS
// ==============================================

model SurveyResponse {
    id        Int      @id @default(autoincrement())
    response  Json
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    @@map("___tbl_tantor_surveyresponse")
}

model OptionQuestionnaires {
    id        Int      @id @default(autoincrement())
    option    String
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    @@map("___tbl_tantor_optionquestionnaires")
}

model QuestionnaireOnInscriptionSession {
    id        Int      @id @default(autoincrement())
    question  String
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    @@map("___tbl_tantor_questionnaireoninscriptionsession")
}

model QuestionsPourQuestionnaireInscription {
    id        Int      @id @default(autoincrement())
    question  String
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    @@map("___tbl_tantor_questionspourquestionnaireinscription")
}

// ==============================================
// RECLAMATION MODELS
// ==============================================

model ReclamationFormation {
    id        Int      @id @default(autoincrement())
    content   String
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    @@map("___tbl_tantor_docsreclamationformations")
}

// ==============================================
// APP INFO MODELS
// ==============================================

model AppInfos {
    id        Int      @id @default(autoincrement())
    info      String
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    @@map("___tbl_tantor_infos")
}

// ==============================================
// ADDITIONAL MODELS (from table names but not yet implemented)
// ==============================================

model DocumentsStudents {
    id        Int      @id @default(autoincrement())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    @@map("___tbl_tantor_documentsstudents")
}

model OpcoPayement {
    id        Int      @id @default(autoincrement())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    @@map("___tbl_tantor_opcopayement")
}

model Documents {
    id        Int      @id @default(autoincrement())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    @@map("___tbl_tantor_documents")
}

model SessionHasCours {
    id        Int      @id @default(autoincrement())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    @@map("___tbl_tantor_sessionhascours")
}

model GroupeFormations {
    id        Int      @id @default(autoincrement())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    @@map("___tbl_tantor_thematicsformations")
}

model StagiaireHasSession {
    id        Int      @id @default(autoincrement())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    @@map("___tbl_tantor_staghassessions")
}

model StagiaireHasSessionHasSeance {
    id        Int      @id @default(autoincrement())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    @@map("___tbl_tantor_staghassessionshasseances")
}

model SeancesSessions {
    id        Int      @id @default(autoincrement())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    @@map("___tbl_tantor_seancessessions")
}
